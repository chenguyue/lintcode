/**
 * Definition of Interval:
 * public class Interval {
 *     int start, end;
 *     Interval(int start, int end) {
 *         this.start = start;
 *         this.end = end;
 *     }
 */

class Solution {
    /**
     * @param intervals, a collection of intervals
     * @return: A new sorted interval list.
     */
    public List<Interval> merge(List<Interval> intervals) {
        // write your code here
        if(intervals == null)
            return intervals;
        if(intervals.size() <= 1)
            return intervals;
        ArrayList<Interval> a = new ArrayList<Interval>();
        Collections.sort(intervals, new IntervalComparator());
        Interval temp = new Interval(0,0);
        temp = intervals.get(0);
        a.add(temp);
        for(int i = 1;i < intervals.size();i++)
        {
            //System.out.println(i);
            temp = intervals.get(i);
            //System.out.println(temp.toString());
            int x = a.size();
            //System.out.println(x);
            Interval last = a.get(x - 1);
            if(last.end < temp.start)
            {
                //System.out.println("if");
                a.add(temp);
                
            }
            else
            {
                //System.out.println("else");
                temp.start = last.start;
                if(temp.end <= last.end)
                {
                    temp.end = last.end;
                }
                a.remove(x - 1);
                a.add(temp);
            }
            //System.out.println("end");
        }
        return a;
    }
    private class IntervalComparator implements Comparator<Interval> {
        public int compare(Interval a, Interval b) {
            return a.start - b.start;
        }
    }

}
